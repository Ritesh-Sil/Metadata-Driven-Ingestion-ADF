{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "azrdatafactoryritesh"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"ls_blobstorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_blobstorage'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://storageaccountritesh.dfs.core.windows.net/"
		},
		"ls_kv_s3_to_azr_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://myazrkeyvault1.vault.azure.net/"
		},
		"ls_s3_to_azr_properties_typeProperties_accessKeyId": {
			"type": "object",
			"defaultValue": {
				"type": "AzureKeyVaultSecret",
				"store": {
					"referenceName": "ls_kv_s3_to_azr",
					"type": "LinkedServiceReference"
				},
				"secretName": "s3-azr-integration-access-key"
			}
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_from_hdfs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-28T12:49:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_raw_stage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_raw_parquet_store",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_raw_parquet_store",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-20T13:41:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_raw_parquet_store')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_source_to_raw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_src_json_store",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_raw_parquet_store",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-20T13:41:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_json_store')]",
				"[concat(variables('factoryId'), '/datasets/ds_raw_parquet_store')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_expression_language_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Expr Test",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "var1",
							"value": "gbfb"
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Expr Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 30
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"var1": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-27T10:41:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_lkp_metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_metadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_src_json_store",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-20T17:06:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_json_store')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_s3_azr_integration')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "It will ingest the data from S3 bucket into Azure Storage.",
				"activities": [
					{
						"name": "s3-to-azure-blob",
						"description": "Copies the customer data from S3 to Azure blob storage",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AmazonS3ReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "s3_customer_json",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@concat(formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(addDays(utcnow(),-1),'dd'))",
										"type": "Expression"
									},
									"fileName": "Customer_Valid.json"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@concat('Customer_',formatDateTime(adddays(utcnow(),-1),'yyyyMMdd'))",
										"type": "Expression"
									},
									"fileName": "Customer.json"
								}
							}
						]
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "s3-to-azure-blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"headers": {}
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_src_json_store",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v4",
							"value": {
								"value": "@activity('Get Metadata1').output.exists",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('v4')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "s3-to-azure-blob_copy1",
									"description": "Copies the customer data from S3 to Azure blob storage",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AmazonS3ReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "s3_customer_json",
											"type": "DatasetReference",
											"parameters": {
												"filePath": {
													"value": "@concat(formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(addDays(utcnow(),-1),'dd'))",
													"type": "Expression"
												},
												"fileName": "Customer_Valid.json"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Json1",
											"type": "DatasetReference",
											"parameters": {
												"filePath": {
													"value": "@concat('Customer_',formatDateTime(adddays(utcnow(),-1),'yyyyMMdd'))",
													"type": "Expression"
												},
												"fileName": "Customer.json"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Var1": {
						"type": "String"
					},
					"var2": {
						"type": "String"
					},
					"var3": {
						"type": "String"
					},
					"v4": {
						"type": "Boolean"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-28T12:49:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/s3_customer_json')]",
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/ds_src_json_store')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_test_expression_language')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Test the expression language",
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Var1",
							"value": {
								"value": "@concat(formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'mm'),'/',formatDateTime(utcnow(),'dd'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Var1": {
						"type": "String"
					},
					"var2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-27T06:55:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blobstorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						},
						"container": "landing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"STORE_ID": {
							"type": "string"
						},
						"STORE_NAME": {
							"type": "string"
						},
						"WEB_ADDRESS": {
							"type": "string"
						},
						"LATITUDE": {
							"type": "string"
						},
						"LONGITUDE": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_metadata_json_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "metadata"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"STORE_ID": {
							"type": "string"
						},
						"STORE_NAME": {
							"type": "string"
						},
						"WEB_ADDRESS": {
							"type": "string"
						},
						"LATITUDE": {
							"type": "string"
						},
						"LONGITUDE": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw_json_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blobstorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ingestion/Json"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"STORE_ID": {
							"type": "string"
						},
						"STORE_NAME": {
							"type": "string"
						},
						"WEB_ADDRESS": {
							"type": "string"
						},
						"LATITUDE": {
							"type": "string"
						},
						"LONGITUDE": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw_parquet_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blobstorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ingestion/Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "raw"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_json_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "landing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"STORE_ID": {
							"type": "string"
						},
						"STORE_NAME": {
							"type": "string"
						},
						"WEB_ADDRESS": {
							"type": "string"
						},
						"LATITUDE": {
							"type": "string"
						},
						"LONGITUDE": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/s3_customer_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_s3_to_azr",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string",
						"defaultValue": "2024/04/26"
					},
					"fileName": {
						"type": "string",
						"defaultValue": "Customer_Valid.json"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AmazonS3Location",
						"bucketName": "s3-azure-ingestion",
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						},
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"VehicleID": {
							"type": "string"
						},
						"latitiude": {
							"type": "number"
						},
						"longitude": {
							"type": "number"
						},
						"City": {
							"type": "string"
						},
						"temeprature": {
							"type": "integer"
						},
						"speed": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_s3_to_azr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_blobstorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_blobstorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_kv_s3_to_azr')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_kv_s3_to_azr_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_s3_to_azr')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AmazonS3",
				"typeProperties": {
					"serviceUrl": "https://s3.amazonaws.com",
					"accessKeyId": "[parameters('ls_s3_to_azr_properties_typeProperties_accessKeyId')]",
					"secretAccessKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_kv_s3_to_azr",
							"type": "LinkedServiceReference"
						},
						"secretName": "s3-azr-integration-secret-access-key"
					},
					"authenticationType": "AccessKey"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_kv_s3_to_azr')]"
			]
		}
	]
}